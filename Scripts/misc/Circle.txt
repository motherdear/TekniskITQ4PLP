(define AddPixel
    (lambda (X Y XCenter YCenter Pixels)
    	;(print "X:" X " Y:"Y)
    	set! Pixels (append Pixels 
        				;putpixel(xc+x,yc+y,7);
                     	(list(cons (+ XCenter X) (+ YCenter Y)))
				        ;putpixel(xc+y,yc+x,7);
                     	(list(cons (+ XCenter Y) (+ YCenter X)))
				        ;putpixel(xc-y,yc+x,7);
                     	(list(cons (- XCenter Y) (+ YCenter X)))
				        ;putpixel(xc-x,yc+y,7);
                     	(list(cons (- XCenter X) (+ YCenter Y)))
				        ;putpixel(xc-x,yc-y,7);
                     	(list(cons (- XCenter X) (- YCenter Y)))
				        ;putpixel(xc-y,yc-x,7);
                     	(list(cons (- XCenter Y) (- YCenter X)))
				        ;putpixel(xc+y,yc-x,7);
                     	(list(cons (+ XCenter Y) (- YCenter X)))
				        ;putpixel(xc+x,yc-y,7);
                     	(list(cons (+ XCenter X) (- YCenter Y)))
                 	 )
    )   
)
(define RecursiveMidPoint 
    (lambda (X Y XCenter YCenter Radius Pk Pixels)
        ;(print "X:" X " Y:" Y )
        (cond
            ((< X Y)
                (cond 
                    ((< Pk 0) 
                        ;x=x+1;
                        (set! X (+ X 1))
                        ;Pk=Pk+(2*x)+1
                        (set! Pk (+ Pk (+ (* 2 X) 1)))
                    )
                    (else 
                        ;x=x+1;
                        (set! X (+ X 1))
                        ;y=y-1;
                        (set! Y (- Y 1))
                        ;Pk=Pk+(2*x)-(2*y)+1;
                        (set! Pk (+ Pk (+ (- (* 2 X)(* 2 Y)) 1)))
                    )
                )
                (set! Pixels (AddPixel X Y XCenter YCenter Pixels))
                (set! Pixels (RecursiveMidPoint X Y XCenter YCenter Radius Pk Pixels))
                ;Pixels
            )
        )
        Pixels
    )
)
(
    ; Define our initial params
    let*(
          (Radius 100)
          (CurrentX 0)
          (CurrentY Radius)
          (XCenter 0)
          (YCenter 0)
          (Pk (- 1 Radius))
          (Pixels (list))
        )
   
    ; Save first pixel
    ; Call recursive algorithm
    (set! Pixels (RecursiveMidPoint CurrentX CurrentY XCenter YCenter Radius Pk Pixels))
    (print Pixels)
    ;(print "done")
)